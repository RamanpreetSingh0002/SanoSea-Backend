const Role = require("../models/role.js");
const User = require("../models/user.js");
const SubAdmin = require("../models/subAdmin.js");

const { sendError, generatePassword } = require("../utils/helper.js");
const { generateMailTransporter } = require("../utils/mail.js");

// * create route for sub admin
exports.create = async (req, res) => {
  const { firstName, lastName, email, phoneNumber, roleName } = req.body;

  try {
    // Check if the email already exists
    const oldUserEmail = await User.findOne({ email });
    if (oldUserEmail) return sendError(res, "This email is already in use!");

    // Check if the phone number already exists
    const oldUserPhone = await User.findOne({ phoneNumber });
    if (oldUserPhone)
      return sendError(res, "This phone number is already in use!");

    // Fetch the roleId based on the provided role name
    const role = await Role.findOne({ name: roleName });
    if (!role) return sendError(res, "Invalid role name provided!");

    // Generate a secure password automatically
    const autoGeneratedPassword = generatePassword();

    // Create a new user and save
    const newUser = await User.create({
      fullName: lastName ? `${firstName} ${lastName}` : firstName,
      firstName,
      lastName,
      email,
      phoneNumber,
      password: autoGeneratedPassword,
      roleId: role._id,
    });

    // Send email to the new user
    // const transport = mailTransporter();
    const transport = generateMailTransporter();

    transport.sendMail({
      from: "admin@sanosea.com",
      to: newUser.email,
      subject: "Welcome to SanoSea App - Your Account Credentials",
      html: `
          <h1>Welcome to SanoSea App</h1>
          <p>Your new account has been successfully created!</p>
          <p>Here are your login credentials:</p>
          <ul>
              <li><strong>Email:</strong> ${newUser.email}</li>
              <li><strong>Password:</strong> ${autoGeneratedPassword}</li>
          </ul>
          <p>For security reasons, we highly recommend you reset your password after logging in.</p>
          <p>Click <a href="http://localhost:3000/auth/change-password?email=${newUser.email}">here</a> to reset your password.</p>
          <p>Thank you for joining us!</p>
          <p>Best regards,</p>
          <p>SanoSea App Team</p>
        `,
    });

    res.status(201).json({
      user: {
        id: newUser._id,
        fullName: newUser.fullName,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        email: newUser.email,
        phoneNumber: newUser.phoneNumber,
        password: newUser.password,
        roleId: newUser.roleId,
        roleName: role.name,
      },
      message:
        "Account Created Successfully! A temporary password has been sent to the user's email.",
    });
  } catch (error) {
    sendError(res, error.message, 500);
  }
};

// * get the list of sub-admin (Coordinator and Audit Manager)
exports.getSubAdmin = async (req, res) => {
  try {
    // Fetch the roles for Coordinator and Audit Manager
    const coordinatorRole = await Role.findOne({ name: "Coordinator" });
    const auditManagerRole = await Role.findOne({ name: "Audit Manager" });

    if (!coordinatorRole || !auditManagerRole)
      return sendError(res, "Roles not found!", 404);

    // Fetch users with the Coordinator or Audit Manager role
    const users = await User.find({
      roleId: { $in: [coordinatorRole._id, auditManagerRole._id] },
    }).populate("roleId");

    if (!users || users.length === 0)
      return res
        .status(404)
        .json({ message: "No users found for the specified roles." });

    res.status(200).json({
      message: "Users fetched successfully!",
      users,
    });
  } catch (error) {
    sendError(res, error.message, 500);
  }
};

// * get the list of Audit Manager
exports.getAuditManagers = async (req, res) => {
  try {
    // Fetch the role for Audit Manager
    const auditManagerRole = await Role.findOne({ name: "Audit Manager" });
    if (!auditManagerRole) return sendError(res, "Role not found!", 404);

    // Fetch users with the Audit Manager role
    const users = await User.find({ roleId: auditManagerRole._id }).populate(
      "roleId"
    );

    if (!users || users.length === 0)
      return res.status(404).json({ message: "No Audit Managers found." });

    res.status(200).json({
      message: "Audit Managers fetched successfully!",
      users,
    });
  } catch (error) {
    sendError(res, error.message, 500);
  }
};

// * get the list of Port Agent
exports.getPortAgents = async (req, res) => {
  try {
    // Fetch the role for Port Agent
    const portAgentRole = await Role.findOne({ name: "Port Agent" });
    if (!portAgentRole) return sendError(res, "Role not found!", 404);

    // Fetch users with the Port Agent role
    const users = await User.find({ roleId: portAgentRole._id }).populate(
      "roleId"
    );

    if (!users || users.length === 0)
      return res.status(404).json({ message: "No Port Agents found." });

    res.status(200).json({
      message: "Port Agents fetched successfully!",
      users,
    });
  } catch (error) {
    sendError(res, error.message, 500);
  }
};

// * get the list of Patient
exports.getPatients = async (req, res) => {
  try {
    // Fetch the role for Patient
    const patientRole = await Role.findOne({ name: "Patient" });
    if (!patientRole) return sendError(res, "Role not found!", 404);

    // Fetch users with the Patient role
    const users = await User.find({ roleId: patientRole._id }).populate(
      "roleId"
    );

    if (!users || users.length === 0)
      return res.status(404).json({ message: "No Patients found." });

    res.status(200).json({
      message: "Patients fetched successfully!",
      users,
    });
  } catch (error) {
    sendError(res, error.message, 500);
  }
};

// * get the list of Doctors
exports.getDoctors = async (req, res) => {
  try {
    // Fetch the role for Doctor
    const doctorRole = await Role.findOne({ name: "Doctor" });
    if (!doctorRole) return sendError(res, "Role not found!", 404);

    // Fetch users with the Doctor role
    const users = await User.find({ roleId: doctorRole._id }).populate(
      "roleId"
    );

    if (!users || users.length === 0)
      return res.status(404).json({ message: "No Doctors found." });

    res.status(200).json({
      message: "Doctors fetched successfully!",
      users,
    });
  } catch (error) {
    sendError(res, error.message, 500);
  }
};

// * get the list of General Physician
exports.getGeneralPhysician = async (req, res) => {
  try {
    // Fetch the role for Doctor
    const generalPhysicianRole = await Role.findOne({
      name: "General Physician",
    });
    if (!generalPhysicianRole) return sendError(res, "Role not found!", 404);

    // Fetch users with the General Physician role
    const users = await User.find({
      roleId: generalPhysicianRole._id,
    }).populate("roleId");

    if (!users || users.length === 0)
      return res.status(404).json({ message: "No General Physicians found." });

    res.status(200).json({
      message: "General Physicians fetched successfully!",
      users,
    });
  } catch (error) {
    sendError(res, error.message, 500);
  }
};
